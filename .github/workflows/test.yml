name: GitHub Repository Data Extractor

on:
  # Allows you to run this workflow manually.
  workflow_dispatch:
  push:
  # branches: [ "main" ]
  # schedule:
   # - cron: '27 17 * * 2'

jobs:
  # Get GitHub Repository Data Job
  Get-GitHub-Repo-Information:
    runs-on: ubuntu-latest
    # Saves the data of the repository language of the repository
    outputs:
      Repo_Language: ${{ steps.RepoInfo.outputs.repo_language }}

    steps:
    # Checks out the source code.
    - name: Checks Out the Source Code
      uses: actions/checkout@v2

    # Gets Repository information and extracts the language from the info data
    - name: Gets the GitHub repo information and extracts the language of the repository
      id: RepoInfo
      run: |
        # Repository API URL
        REPO_API_URL="https://api.github.com/repos/${{ github.repository }}"

        # Sends a request to get the repository information
        Get_Repo_Information_Request=$(curl -s $REPO_API_URL \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -w "%{http_code}" \
          -o "github-info-output.json") # Saves the results of the query to a file

        echo "API Request was successful."

        # Saves the GitHub request's status code
        Get_Repo_Information_Request_Status_Code=$(echo $Get_Repo_Information_Request | tr -d '\n' | sed -e 's/.*Status Code://')
          
        # Prints the response of the GitHub Request as a parsed JSON
        echo "GitHub API Request response saved to a JSON file. Showing the results from the query:"
        jq . github-info-output.json

        # Extracts the language or languages from the output JSON file
        LANGUAGE=$(cat "github-info-output.json" | jq -r '.language')

        # Saves the repository information as the output of the current step to be used in next steps
        echo "::set-output name=repo_language::$LANGUAGE"

    # RUNNER
    - name: "Read Java Info"
      id: "java_info"
      uses: YunaBraska/java-info-action@main
    
    # CONFIGS (Optional)
    #  with:
    #   deep: '-1'
    #    work-dir: '.'
    #   jv-fallback: 17
    #    pv-fallback: '0.0.1'
    #    pe-fallback: 'utf-8'
    #    custom-gradle-cmd: "clean build"
    #    custom-maven-cmd: "clean package"

    # PRINT
    - name: "Print Java Version"
      run: |
          echo "java_version                     [${{ steps.java_info.outputs.java_version }}]"
          echo "artifact_name                    [${{ steps.java_info.outputs.artifact_name }}]"
          echo "project_version                  [${{ steps.java_info.outputs.project_version }}]"
          echo "project_encoding                 [${{ steps.java_info.outputs.project_encoding }}]"
          echo "cmd_custom                       [${{ steps.java_info.outputs.cmd_custom }}]"
          echo "is_gradle                        [${{ steps.java_info.outputs.is_gradle }}]"
          echo "is_maven                         [${{ steps.java_info.outputs.is_maven }}]"
          echo "has_wrapper                      [${{ steps.java_info.outputs.has_wrapper }}]"
          echo "builder_name                     [${{ steps.java_info.outputs.builder_name }}]"
          echo "x_sourceCompatibility            [${{ steps.java_info.outputs.x_sourceCompatibility }}]"
          echo "x_project_build_finalName        [${{ steps.java_info.outputs.x_project_build_finalName }}]"
          echo "x_groovyOptions_encoding         [${{ steps.java_info.outputs.x_groovyOptions_encoding }}]"
          echo "x_net_minidev_json-smart_version [${{ steps.java_info.outputs.x_project_dependencies_dependency_net_minidev_json-smart_version }}]"

    # SETUP JAVA
    - name: "Setup Java"
      uses: actions/setup-java@main
      with:
        java-version: ${{ steps.java_info.outputs.java_version }}
        distribution: 'adopt'

    # RUN TESTS
    # - name: "Run tests"
    #  run: sh ${{ steps.java_info.outputs.cmd_test }}

  #get-dotnet-version:
    #runs-on: ubuntu-latest

    #steps:
      #- name: Checkout repository
        #uses: actions/checkout@v2

      #- name: Get .NET Version
        #id: dotnet-version
        #run: |
          # Get .NET version using dotnet CLI
          #dotnet_version=$(dotnet --version)
          #echo "::set-output name=dotnet_version::$dotnet_version"

  #use-dotnet-version:
    #runs-on: ubuntu-latest

    #needs: get-dotnet-version

    #steps:
      #- name: Use .NET Version
        #run: |
          #echo "Using .NET Version: ${{ needs.get-dotnet-version.outputs.dotnet_version }}"
